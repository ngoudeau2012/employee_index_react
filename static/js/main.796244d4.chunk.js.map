{"version":3,"sources":["components/Hero/index.js","components/container/index.js","components/ListResults/index.js","components/SearchBar/index.js","components/List/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Hero","className","Container","props","fluid","ListResults","scope","results","map","result","key","email","alt","src","picture","thumbnail","name","first","last","cell","Search","console","log","searchState","id","value","onChange","type","aria-label","aria-describedby","EmployeeList","state","search","list","filteredList","error","populateEmployees","axios","get","then","res","employees","data","setState","filteredSearch","handleInputChange","event","target","toLocaleLowerCase","filteredArr","filter","employee","toLowerCase","includes","this","Component","Home","List","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4TAkBeA,MAff,WACE,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,aCHRC,MAJf,SAAmBC,GACf,OAAO,uCAAKF,UAAS,mBAAcE,EAAMC,MAAQ,SAAW,KAAUD,K,iBCqCzDE,MAtCjB,SAAqBF,GACjB,OACI,2BAAOF,UAAU,uBACjB,+BACE,4BACE,wBAAIK,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,kBAGJ,+BACCH,EAAMI,QAAQC,KAAI,SAAAC,GAAM,OACvB,wBAAIC,IAAKD,EAAOE,OACd,wBAAIL,MAAM,OAAM,yBAAKM,IAAI,GAAGC,IAAKJ,EAAOK,QAAQC,UAAWd,UAAU,eACrE,4BAAKQ,EAAOO,KAAKC,MAAjB,IAAyBR,EAAOO,KAAKE,MACrC,4BAAKT,EAAOE,OACZ,4BAAKF,EAAOU,aCMTC,MAvBf,SAAgBjB,GAEd,OADEkB,QAAQC,IAAInB,EAAMoB,aAElB,6BACA,yBAAKtB,UAAU,0BACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBuB,GAAG,6BAAtC,YAIF,2BACEC,MAAQtB,EAAMoB,YACdG,SAAUvB,EAAMuB,SAChBC,KAAK,OACL1B,UAAU,eACV2B,aAAW,uBACXC,mBAAiB,iCC6CVC,E,4MAxDbC,MAAQ,CACNC,OAAQ,GACRC,KAAM,GACNC,aAAc,GACdC,MAAO,I,EAQTC,kBAAoB,WAClBC,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC9D,IAAMC,EAAYD,EAAIE,KAAKnC,QAC3Bc,QAAQC,IAAImB,GACZ,EAAKE,SAAS,CAAEV,KAAMQ,IACtB,EAAKG,qB,EAITC,kBAAoB,SAACC,GACnB,EAAKH,SAAS,CAAEX,OAAQc,EAAMC,OAAOtB,QACrC,EAAKmB,kB,EAGPA,eAAiB,WAEf,IAAIZ,EAAS,EAAKD,MAAMC,OAAOgB,oBAE3BC,EAAc,EAAKlB,MAAME,KAAKiB,QAAO,SAAAC,GAEvC,MADgB,UAAMA,EAASnC,KAAKC,MAAMmC,cAA1B,YAA2CD,EAASnC,KAAKE,KAAKkC,eAC1DC,SAASrB,MAG1B,EAAKD,MAAMC,OAId,EAAKW,SAAS,CAACT,aAAce,KAH7B5B,QAAQC,IAAI,sBACZ,EAAKqB,SAAS,CAAET,aAAc,EAAKH,MAAME,S,kEA5B3CqB,KAAKlB,sB,+BAmCL,OACE,6BACE,kBAAC,EAAD,CACEb,YAAa+B,KAAKvB,MAAMC,OACxBN,SAAU4B,KAAKT,oBAEjB,kBAAC,EAAD,CAAatC,QAAS+C,KAAKvB,MAAMG,oB,GAnDdqB,aCkBZC,E,4MAjBXzB,MAAO,CACHC,OAAQ,I,uDAIR,OACI,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAACyB,EAAD,Y,GAVGF,aCMJG,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLd,QAAQc,MAAMA,EAAMwC,c","file":"static/js/main.796244d4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero() {\n  return (\n    <div className=\"text-center\">\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <p className=\"lead\">\n            \n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from \"react\";\n\nfunction Container(props){\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;","import React from \"react\";\n\nfunction ListResults(props) {\n    return (\n        <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Photo</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Phone Number</th>\n          </tr>\n        </thead>\n        <tbody>\n        {props.results.map(result => (\n          <tr key={result.email} >\n            <th scope=\"row\"><img alt=\"\" src={result.picture.thumbnail} className=\"img-fluid\" /></th>\n            <td>{result.name.first} {result.name.last}</td>\n            <td>{result.email}</td>\n            <td>{result.cell}</td>\n          </tr>\n        ))}\n        </tbody>\n      </table>\n\n    //   <ul className=\"list-group\">\n    //     {props.results.map(result => (\n    //       <li key={result.email} className=\"list-group-item\">\n    //         <img alt=\"Dog\" src={result.picture.thumbnail} className=\"img-fluid\" />\n    //         <p>{result.name.first} {result.name.last}</p>\n    //         <p>{result.email}</p>\n    //         <p>{result.cell}</p>\n\n    //       </li>\n    //     ))}\n    //   </ul>\n      \n    );\n  }\n  \n  export default ListResults;\n  ","import React from \"react\";\n\nfunction Search(props) {\n    console.log(props.searchState)\n  return (\n    <div >\n    <div className=\"input-group mb-3 col-4\">\n      <div className=\"input-group-prepend\">\n        <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">\n          Default\n        </span>\n      </div>\n      <input\n        value= {props.searchState}\n        onChange={props.onChange}\n        type=\"text\"\n        className=\"form-control\"\n        aria-label=\"Sizing example input\"\n        aria-describedby=\"inputGroup-sizing-default\"\n      />\n    </div>\n    </div>\n  );\n}\n\nexport default Search;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ListResults from \"../ListResults\";\nimport Search from \"../SearchBar\";\n\n\nclass EmployeeList extends Component {\n  state = {\n    search: \"\",\n    list: [],\n    filteredList: [],\n    error: \"\",\n  };\n\n  //   // When the component mounts, get a list of all available base breeds and update this.state.breeds\n  componentDidMount() {\n    this.populateEmployees();\n  }\n\n  populateEmployees = () => {\n    axios.get(\"https://randomuser.me/api/?results=200&nat=u\").then((res) => {\n      const employees = res.data.results;\n      console.log(employees);\n      this.setState({ list: employees });\n      this.filteredSearch();\n    });\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ search: event.target.value });\n    this.filteredSearch();\n  };\n\n  filteredSearch = () => {\n    \n    let search = this.state.search.toLocaleLowerCase();\n\n    let filteredArr = this.state.list.filter(employee => {\n      let employeeName = `${employee.name.first.toLowerCase()} ${employee.name.last.toLowerCase()}`\n      return employeeName.includes(search)\n    });\n\n    if (!this.state.search) {\n      console.log(\"Success! No search\");\n      this.setState({ filteredList: this.state.list });\n    } else {\n      this.setState({filteredList: filteredArr})\n      }\n    };\n\n  render() {\n    return (\n      <div>\n        <Search\n          searchState={this.state.search}\n          onChange={this.handleInputChange}\n        />\n        <ListResults results={this.state.filteredList} />\n      </div>\n    );\n  }\n}\n\nexport default EmployeeList;\n","import React, { Component } from \"react\";\n\nimport Hero from \"../components/Hero/index\"\nimport Container from \"../components/container/index\";\nimport List from \"../components/List/index\";\n\nclass Home extends Component {\n    state ={\n        search: \"\",\n    }\n\n    render(){\n        return (\n            <div>\n            <Hero />\n            <Container>\n                <List />\n            </Container>\n            </div>\n        )\n    }\n    \n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/Home\"\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}